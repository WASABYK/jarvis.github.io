// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const elements = {
    time: document.getElementById('time'),
    date: document.getElementById('date'),
    temperature: document.getElementById('temperature'),
    weatherDesc: document.getElementById('weather-desc'),
    location: document.getElementById('location'),
    externalTemp: document.getElementById('external-temp'),
    humidity: document.getElementById('humidity'),
    pressure: document.getElementById('pressure'),
    weatherIcon: document.getElementById('weather-icon'),
    systemStatus: document.querySelector('.system-status'),
    securityStatus: document.querySelector('.security-status'),
    systemMessage: document.querySelector('.system-message p'),
    checkOverlay: document.getElementById('system-check-overlay'),
    checkLogs: document.getElementById('system-check-logs'),
    startupSound: document.getElementById('startup-sound'),
    jarvisSound: document.getElementById('jarvis-sound')
};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
const systemMessages = [
    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–π —Å–µ—Ç–∏...",
    "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...",
    "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã...",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arc Reactor...",
    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...",
    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...",
    "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    updateTime();
    setInterval(updateTime, 1000);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    determineLocation().then(city => {
        getWeather(city);
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –∫–∞–∫ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        getWeather('Moscow');
    });

    setTimeout(() => {
        performSystemCheck();
    }, 1000);
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function determineLocation() {
    return new Promise((resolve, reject) => {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                async position => {
                    try {
                        const { latitude, longitude } = position.coords;
                        const city = await getCityFromCoords(latitude, longitude);
                        resolve(city);
                    } catch (error) {
                        reject(error);
                    }
                },
                async error => {
                    console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ IP');
                    try {
                        const city = await getCityFromIP();
                        resolve(city);
                    } catch (ipError) {
                        reject(ipError);
                    }
                }
            );
        } else {
            // –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –ø–æ IP
            getCityFromIP().then(resolve).catch(reject);
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function getCityFromCoords(latitude, longitude) {
    const response = await fetch(
        `https://geocoding-api.open-meteo.com/v1/reverse?latitude=${latitude}&longitude=${longitude}&language=ru`
    );
    const data = await response.json();

    if (data.results && data.results.length > 0) {
        return data.results[0].name;
    }
    throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ IP (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
async function getCityFromIP() {
    try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();

        if (data.city) {
            return data.city;
        }
        throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ IP');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ IP:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTime() {
    const now = new Date();
    elements.time.textContent = now.toLocaleTimeString('ru-RU');
    elements.date.textContent = now.toLocaleDateString('ru-RU', {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async function getWeather(city) {
    try {
        const geoResponse = await fetch(
            `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1&language=ru`
        );
        const geoData = await geoResponse.json();

        if (!geoData.results || geoData.results.length === 0) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { latitude, longitude } = geoData.results[0];
        const weatherResponse = await fetch(
            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}` +
            `&current_weather=true&hourly=temperature_2m,relativehumidity_2m,pressure_msl` +
            `&timezone=auto&forecast_days=1`
        );
        const weatherData = await weatherResponse.json();

        updateWeatherUI(weatherData, geoData.results[0].name);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        elements.weatherDesc.textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ–≥–æ–¥—ã (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function updateWeatherUI(weatherData, cityName) {
    const current = weatherData.current_weather;
    const hourly = weatherData.hourly;

    elements.temperature.textContent = `${current.temperature}¬∞C`;
    elements.externalTemp.textContent = `${current.temperature}¬∞C`;
    elements.humidity.textContent = `${hourly.relativehumidity_2m[0]}%`;
    elements.pressure.textContent = `${hourly.pressure_msl[0]} hPa`;
    elements.location.textContent = cityName.toUpperCase();
    elements.weatherDesc.textContent = getWeatherDescription(current.weathercode);
    updateWeatherIcon(current.weathercode);
}

// –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function getWeatherDescription(code) {
    const descriptions = {
        0: '–Ø—Å–Ω–æ',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ',
        45: '–¢—É–º–∞–Ω',
        48: '–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º',
        51: '–ú–æ—Ä–æ—Å—å',
        53: '–ú–æ—Ä–æ—Å—å',
        55: '–ú–æ—Ä–æ—Å—å',
        61: '–î–æ–∂–¥—å',
        63: '–î–æ–∂–¥—å',
        65: '–î–æ–∂–¥—å',
        71: '–°–Ω–µ–≥',
        73: '–°–Ω–µ–≥',
        75: '–°–Ω–µ–≥',
        80: '–õ–∏–≤–µ–Ω—å',
        81: '–õ–∏–≤–µ–Ω—å',
        82: '–õ–∏–≤–µ–Ω—å',
        95: '–ì—Ä–æ–∑–∞',
        96: '–ì—Ä–æ–∑–∞',
        99: '–ì—Ä–æ–∑–∞'
    };
    return descriptions[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function updateWeatherIcon(code) {
    const icons = {
        0: '‚òÄÔ∏è',
        1: 'üå§',
        2: '‚õÖ',
        3: '‚òÅÔ∏è',
        45: 'üå´',
        48: 'üå´',
        51: 'üåß',
        53: 'üåß',
        55: 'üåß',
        61: 'üåß',
        63: 'üåß',
        65: 'üåß',
        71: '‚ùÑÔ∏è',
        73: '‚ùÑÔ∏è',
        75: '‚ùÑÔ∏è',
        80: 'üå¶',
        81: 'üå¶',
        82: 'üå¶',
        95: '‚õà',
        96: '‚õà',
        99: '‚õà'
    };
    elements.weatherIcon.textContent = icons[code] || 'üåÄ';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function performSystemCheck() {
    elements.checkOverlay.style.display = 'flex';
    elements.checkLogs.innerHTML = '';

    try {
        elements.startupSound.currentTime = 0;
        await elements.startupSound.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }

    for (let i = 0; i < systemMessages.length; i++) {
        await addLogMessage(systemMessages[i]);
        await delay(800 + Math.random() * 400);
    }

    await addLogMessage("‚úì –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
    await delay(2000);

    elements.checkOverlay.style.display = 'none';
    elements.systemStatus.textContent = "–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê";
    elements.securityStatus.textContent = "–ó–ê–©–ò–¢–ê: 100%";
    elements.systemMessage.textContent = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —Å—ç—Ä. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.";

    try {
        elements.jarvisSound.currentTime = 0;
        await elements.jarvisSound.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function addLogMessage(message) {
    return new Promise(resolve => {
        const logEntry = document.createElement('p');
        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;

        if (Math.random() < 0.2) {
            logEntry.classList.add('error');
        }

        elements.checkLogs.appendChild(logEntry);
        logEntry.scrollIntoView({ behavior: 'smooth' });
        setTimeout(resolve, 100);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
