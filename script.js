// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    weatherAPIKey: '1dc391a4df1d4e0eb9e182841251904', // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Open-Meteo
    city: 'Moscow',
    lang: 'ru'
};

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const elements = {
    time: document.getElementById('time'),
    date: document.getElementById('date'),
    temperature: document.getElementById('temperature'),
    weatherDesc: document.getElementById('weather-desc'),
    location: document.getElementById('location'),
    externalTemp: document.getElementById('external-temp'),
    humidity: document.getElementById('humidity'),
    pressure: document.getElementById('pressure'),
    weatherIcon: document.querySelector('.weather-icon')
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function updateTime() {
    const now = new Date();
    const timeOptions = { hour: '2-digit', minute: '2-digit', second: '2-digit' };
    const dateOptions = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };

    elements.time.textContent = now.toLocaleTimeString('ru-RU', timeOptions);
    elements.date.textContent = now.toLocaleDateString('ru-RU', dateOptions);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ Open-Meteo (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±–µ–∑ API –∫–ª—é—á–∞)
async function getWeather() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ (–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        const geoResponse = await fetch(
            `https://geocoding-api.open-meteo.com/v1/search?name=${config.city}&count=1&language=${config.lang}`
        );
        const geoData = await geoResponse.json();

        if (!geoData.results || geoData.results.length === 0) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { latitude, longitude } = geoData.results[0];

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        const weatherResponse = await fetch(
            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}` +
            `&current_weather=true&hourly=temperature_2m,relativehumidity_2m,pressure_msl` +
            `&timezone=auto&forecast_days=1`
        );

        const weatherData = await weatherResponse.json();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const current = weatherData.current_weather;
        const hourly = weatherData.hourly;

        elements.temperature.textContent = `${current.temperature}¬∞C`;
        elements.externalTemp.textContent = `${current.temperature}¬∞C`;
        elements.humidity.textContent = `${hourly.relativehumidity_2m[0]}%`;
        elements.pressure.textContent = `${hourly.pressure_msl[0]} hPa`;
        elements.location.textContent = geoData.results[0].name.toUpperCase();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
        elements.weatherDesc.textContent = getWeatherDescription(current.weathercode);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        updateWeatherIcon(current.weathercode);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        elements.weatherDesc.textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }
}

// –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É (WMO)
function getWeatherDescription(code) {
    const descriptions = {
        0: '–Ø—Å–Ω–æ',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ',
        45: '–¢—É–º–∞–Ω',
        48: '–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º',
        51: '–ú–æ—Ä–æ—Å—å: —Å–ª–∞–±–∞—è',
        53: '–ú–æ—Ä–æ—Å—å: —É–º–µ—Ä–µ–Ω–Ω–∞—è',
        55: '–ú–æ—Ä–æ—Å—å: —Å–∏–ª—å–Ω–∞—è',
        56: '–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å: —Å–ª–∞–±–∞—è',
        57: '–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å: —Å–∏–ª—å–Ω–∞—è',
        61: '–î–æ–∂–¥—å: —Å–ª–∞–±—ã–π',
        63: '–î–æ–∂–¥—å: —É–º–µ—Ä–µ–Ω–Ω—ã–π',
        65: '–î–æ–∂–¥—å: —Å–∏–ª—å–Ω—ã–π',
        66: '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å: —Å–ª–∞–±—ã–π',
        67: '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å: —Å–∏–ª—å–Ω—ã–π',
        71: '–°–Ω–µ–≥: —Å–ª–∞–±—ã–π',
        73: '–°–Ω–µ–≥: —É–º–µ—Ä–µ–Ω–Ω—ã–π',
        75: '–°–Ω–µ–≥: —Å–∏–ª—å–Ω—ã–π',
        77: '–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞',
        80: '–õ–∏–≤–µ–Ω—å: —Å–ª–∞–±—ã–π',
        81: '–õ–∏–≤–µ–Ω—å: —É–º–µ—Ä–µ–Ω–Ω—ã–π',
        82: '–õ–∏–≤–µ–Ω—å: —Å–∏–ª—å–Ω—ã–π',
        85: '–°–Ω–µ–≥–æ–ø–∞–¥: —Å–ª–∞–±—ã–π',
        86: '–°–Ω–µ–≥–æ–ø–∞–¥: —Å–∏–ª—å–Ω—ã–π',
        95: '–ì—Ä–æ–∑–∞',
        96: '–ì—Ä–æ–∑–∞ —Å–æ —Å–ª–∞–±—ã–º –≥—Ä–∞–¥–æ–º',
        99: '–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º'
    };

    return descriptions[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
function updateWeatherIcon(code) {
    const iconMap = {
        0: '‚òÄÔ∏è',
        1: 'üå§',
        2: '‚õÖ',
        3: '‚òÅÔ∏è',
        45: 'üå´',
        48: 'üå´',
        51: 'üåß',
        53: 'üåß',
        55: 'üåß',
        56: 'üåß',
        57: 'üåß',
        61: 'üåß',
        63: 'üåß',
        65: 'üåß',
        66: 'üåß',
        67: 'üåß',
        71: '‚ùÑÔ∏è',
        73: '‚ùÑÔ∏è',
        75: '‚ùÑÔ∏è',
        77: '‚ùÑÔ∏è',
        80: 'üå¶',
        81: 'üå¶',
        82: 'üå¶',
        85: '‚ùÑÔ∏è',
        86: '‚ùÑÔ∏è',
        95: '‚õà',
        96: '‚õà',
        99: '‚õà'
    };

    elements.weatherIcon.textContent = iconMap[code] || 'üåÄ';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateTime();
getWeather();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(updateTime, 1000);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(getWeather, 1800000);