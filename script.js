
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const TELEGRAM_BOT_TOKEN = '';
const TELEGRAM_CHAT_ID = '-';

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const elements = {
    time: document.getElementById('time'),
    date: document.getElementById('date'),
    temperature: document.getElementById('temperature'),
    weatherDesc: document.getElementById('weather-desc'),
    location: document.getElementById('location'),
    externalTemp: document.getElementById('external-temp'),
    humidity: document.getElementById('humidity'),
    pressure: document.getElementById('pressure'),
    weatherIcon: document.getElementById('weather-icon'),
    systemStatus: document.querySelector('.system-status'),
    securityStatus: document.querySelector('.security-status'),
    systemMessage: document.querySelector('.system-message p'),
    checkOverlay: document.getElementById('system-check-overlay'),
    checkLogs: document.getElementById('system-check-logs'),
    startupSound: document.getElementById('startup-sound'),
    jarvisSound: document.getElementById('jarvis-sound'),
    jarvisContainer: document.querySelector('.jarvis-container')
};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
const systemMessages = [
    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–π —Å–µ—Ç–∏...",
    "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...",
    "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã...",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arc Reactor...",
    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...",
    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...",
    "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', async () => {
    updateTime();
    setInterval(updateTime, 1000);

    await performSystemCheck();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    try {
        const city = await determineLocation();
        await getWeather(city);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ
        await saveLoginInfo(city);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
        const defaultCity = 'Moscow';
        await getWeather(defaultCity);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ —Å –≥–æ—Ä–æ–¥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await saveLoginInfo(defaultCity);
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ö–æ–¥–µ
async function saveLoginInfo(city) {
    const loginInfo = {
        timestamp: new Date().toISOString(),
        city: city,
        userAgent: navigator.userAgent,
        screenResolution: `${window.screen.width}x${window.screen.height}`,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    };

    try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await saveToDatabase(loginInfo);
    } catch (dbError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        try {
            await sendToTelegram(loginInfo);
        } catch (telegramError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
async function saveToDatabase(data) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≤–∞—à—É –ë–î
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ fetch –∫ –≤–∞—à–µ–º—É API
    return new Promise((resolve, reject) => {
        // –≠–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Telegram fallback
        reject(new Error('Database connection failed'));
        
        // –†–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
        /*
        fetch('your-api-endpoint', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) throw new Error('Database error');
            return response.json();
        })
        .then(resolve)
        .catch(reject);
        */
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(data) {
    const text = `–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É:\n` +
                 `üìç –ì–æ—Ä–æ–¥: ${data.city}\n` +
                 `üïí –í—Ä–µ–º—è: ${new Date(data.timestamp).toLocaleString()}\n` +
                 `üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${data.timezone}\n` +
                 `üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${data.userAgent}\n` +
                 `üñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: ${data.screenResolution}`;

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: text,
            disable_notification: false
        })
    });

    if (!response.ok) {
        throw new Error('Telegram API error');
    }

    return response.json();
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function determineLocation() {
    return new Promise((resolve, reject) => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                async position => {
                    try {
                        const { latitude, longitude } = position.coords;
                        const city = await getCityFromCoords(latitude, longitude);
                        resolve(city);
                    } catch (error) {
                        reject(error);
                    }
                },
                async error => {
                    console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ IP');
                    try {
                        const city = await getCityFromIP();
                        resolve(city);
                    } catch (ipError) {
                        reject(ipError);
                    }
                }
            );
        } else {
            getCityFromIP().then(resolve).catch(reject);
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function getCityFromCoords(latitude, longitude) {
    try {
        const response = await fetch(
            `https://geocoding-api.open-meteo.com/v1/reverse?latitude=${latitude}&longitude=${longitude}&language=ru`
        );
        const data = await response.json();

        if (data.results && data.results.length > 0) {
            return data.results[0].name;
        }
        throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ IP (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
async function getCityFromIP() {
    try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();

        if (data.city) {
            return data.city;
        }
        throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ IP');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ IP:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTime() {
    const now = new Date();
    elements.time.textContent = now.toLocaleTimeString('ru-RU');
    elements.date.textContent = now.toLocaleDateString('ru-RU', {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async function getWeather(city) {
    try {
        elements.weatherDesc.textContent = '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...';
        
        const geoResponse = await fetch(
            `https://geocoding-api.open-meteo.com/v1/search?name=${city}&count=1&language=ru`
        );
        const geoData = await geoResponse.json();

        if (!geoData.results || geoData.results.length === 0) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { latitude, longitude } = geoData.results[0];
        const weatherResponse = await fetch(
            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}` +
            `&current_weather=true&hourly=temperature_2m,relativehumidity_2m,pressure_msl` +
            `&timezone=auto&forecast_days=1`
        );
        const weatherData = await weatherResponse.json();

        updateWeatherUI(weatherData, geoData.results[0].name);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        elements.weatherDesc.textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
        elements.temperature.textContent = '--¬∞C';
        elements.externalTemp.textContent = '--¬∞C';
        elements.humidity.textContent = '--%';
        elements.pressure.textContent = '-- hPa';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ–≥–æ–¥—ã
function updateWeatherUI(weatherData, cityName) {
    const current = weatherData.current_weather;
    const hourly = weatherData.hourly;

    elements.temperature.textContent = `${Math.round(current.temperature)}¬∞C`;
    elements.externalTemp.textContent = `${Math.round(current.temperature)}¬∞C`;
    elements.humidity.textContent = `${hourly.relativehumidity_2m[0]}%`;
    elements.pressure.textContent = `${hourly.pressure_msl[0]} hPa`;
    elements.location.textContent = cityName.toUpperCase();
    elements.weatherDesc.textContent = getWeatherDescription(current.weathercode);
    updateWeatherIcon(current.weathercode);
}

// –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
function getWeatherDescription(code) {
    const descriptions = {
        0: '–Ø—Å–Ω–æ',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ',
        45: '–¢—É–º–∞–Ω',
        48: '–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º',
        51: '–ú–æ—Ä–æ—Å—å',
        53: '–ú–æ—Ä–æ—Å—å',
        55: '–ú–æ—Ä–æ—Å—å',
        61: '–î–æ–∂–¥—å',
        63: '–î–æ–∂–¥—å',
        65: '–î–æ–∂–¥—å',
        71: '–°–Ω–µ–≥',
        73: '–°–Ω–µ–≥',
        75: '–°–Ω–µ–≥',
        80: '–õ–∏–≤–µ–Ω—å',
        81: '–õ–∏–≤–µ–Ω—å',
        82: '–õ–∏–≤–µ–Ω—å',
        95: '–ì—Ä–æ–∑–∞',
        96: '–ì—Ä–æ–∑–∞',
        99: '–ì—Ä–æ–∑–∞'
    };
    return descriptions[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
function updateWeatherIcon(code) {
    const icons = {
        0: '‚òÄÔ∏è',
        1: 'üå§',
        2: '‚õÖ',
        3: '‚òÅÔ∏è',
        45: 'üå´',
        48: 'üå´',
        51: 'üåß',
        53: 'üåß',
        55: 'üåß',
        61: 'üåß',
        63: 'üåß',
        65: 'üåß',
        71: '‚ùÑÔ∏è',
        73: '‚ùÑÔ∏è',
        75: '‚ùÑÔ∏è',
        80: 'üå¶',
        81: 'üå¶',
        82: 'üå¶',
        95: '‚õà',
        96: '‚õà',
        99: '‚õà'
    };
    elements.weatherIcon.textContent = icons[code] || 'üåÄ';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
async function performSystemCheck() {
    elements.checkLogs.innerHTML = '';

    try {
        elements.startupSound.currentTime = 0;
        await elements.startupSound.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }

    for (let i = 0; i < systemMessages.length; i++) {
        await addLogMessage(systemMessages[i]);
        await delay(800 + Math.random() * 400);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (i % 2 === 0) {
            const percent = Math.min(100, (i + 1) * 10 + Math.floor(Math.random() * 10));
            elements.securityStatus.textContent = `–ó–ê–©–ò–¢–ê: ${percent}%`;
        }
    }

    await addLogMessage("‚úì –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
    await delay(1500);

    // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    elements.checkOverlay.classList.add('hidden');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
    elements.systemStatus.textContent = "–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê";
    elements.securityStatus.textContent = "–ó–ê–©–ò–¢–ê: 100%";
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const hour = new Date().getHours();
    let greeting;
    if (hour < 6) greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";
    else if (hour < 12) greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
    else if (hour < 18) greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
    else greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
    
    elements.systemMessage.textContent = `${greeting}, —Å—ç—Ä. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    elements.jarvisContainer.style.opacity = 1;

    try {
        elements.jarvisSound.currentTime = 0;
        await elements.jarvisSound.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
async function addLogMessage(message) {
    return new Promise(resolve => {
        const logEntry = document.createElement('p');
        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;

        if (Math.random() < 0.2) {
            logEntry.classList.add('error');
        }

        elements.checkLogs.appendChild(logEntry);
        elements.checkLogs.scrollTop = elements.checkLogs.scrollHeight;
        setTimeout(resolve, 100);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
```

 
